#!/bin/bash

function print_folder_contents() {
    local folder="$1"
    echo
    echo "Current files in $folder:"
    for file in "$folder"/*; do
        if [ -f "$file" ]; then
            echo "$(basename "$file")"
        fi
    done
    echo
}

function functionality_1() {
    if [ "$#" -ne 1 ]; then
        echo "Invalid number of parameters for functionality 1."
        echo "Usage: myp -1 sourcefolder"
        exit 1
    fi

    source_folder="$1"

    if [ ! -d "$source_folder" ]; then
        echo "Folder $source_folder does not exist."
        return
    fi

    print_folder_contents "$source_folder"

    echo "Number of files in $source_folder: $(find "$source_folder" -maxdepth 1 -type f | wc -l)"
    for file in "$source_folder"/*; do
        if [[ -f "$file" ]]; then
            filename=$(basename "$file")
            size=$(stat -c "%s" "$file")
            echo "File: $filename, Size: $size bytes"
            extension="${filename##*.}"
            filename_no_extension="${filename%.*}"
            new_filename="${filename_no_extension}${size}.${extension}"
            echo "Renaming $filename to $new_filename"
            mv "$file" "$source_folder/$new_filename"
        fi
    done

    print_folder_contents "$source_folder"

    echo "Functionality 1 completed successfully."
}

function functionality_2() {
    if [ "$#" -ne 3 ]; then
        echo "Invalid number of parameters for functionality 2."
        echo "Usage: myp -2 sourcefolder1 sourcefolder2 destinationfolder"
        exit 1
    fi

    source_folder_1="$1"
    source_folder_2="$2"
    destination_folder="$3"

    if [ ! -d "$source_folder_1" ]; then
        echo "Folder $source_folder_1 does not exist."
        return
    fi

    if [ ! -d "$source_folder_2" ]; then
        echo "Folder $source_folder_2 does not exist."
        return
    fi

    if [ ! -d "$destination_folder" ]; then
        echo "Folder $destination_folder does not exist."
        return
    fi

    print_folder_contents "$source_folder_1"
    print_folder_contents "$source_folder_2"

    echo "Number of files in $source_folder_1: $(find "$source_folder_1" -maxdepth 1 -type f | wc -l)"
    echo "Number of files in $source_folder_2: $(find "$source_folder_2" -maxdepth 1 -type f | wc -l)"

    # Copy files from source folder 1
    for file1 in "$source_folder_1"/*; do
        if [[ -f "$file1" ]]; then
            filename1=$(basename "$file1")
            if [[ ! -f "$source_folder_2/$filename1" ]]; then
                echo "File $filename1 is not common, copying it."
                cp "$file1" "$destination_folder"
            fi
        fi
    done

    # Copy files from source folder 2
    for file2 in "$source_folder_2"/*; do
        if [[ -f "$file2" ]]; then
            filename2=$(basename "$file2")
            if [[ ! -f "$source_folder_1/$filename2" ]]; then
                echo "File $filename2 is not common, copying it."
                cp "$file2" "$destination_folder"
            fi
        fi
    done

    print_folder_contents "$destination_folder"

    echo "Functionality 2 completed successfully."
}

# Main
if [[ "$1" == "-1" ]]; then
    if [ "$#" -ne 2 ]; then
        echo "Invalid number of parameters for functionality 1."
        echo "Usage: myp -1 sourcefolder"
        exit 1
    fi
    functionality_1 "$2"
elif [[ "$1" == "-2" ]]; then
    if [ "$#" -ne 4 ]; then
        echo "Invalid number of parameters for functionality 2."
        echo "Usage: myp -2 sourcefolder1 sourcefolder2 destinationfolder"
        exit 1
    fi
    functionality_2 "$2" "$3" "$4"
else
    echo "Invalid option. Usage: myp -1 sourcefolder OR myp -2 sourcefolder1 sourcefolder2 destinationfolder"
fi

